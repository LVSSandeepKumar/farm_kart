// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  role       userRole
  name       String
  email      String?
  phone      String     @unique
  userName   String?
  password   String
  userStatus userStatus?
  address    Address[]
  Cart       Cart?      @relation()
  Order      Order[]
}

model Address {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  street  String
  city    String
  state   String
  zipCode String
  active  Boolean
  order   Order[]
}

model Brand {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  masterProduct MasterProduct[]
}

model Cart {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int       @unique
  product Product[]
}

model MasterProduct {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  uom         String
  brand       Brand      @relation(fields: [brandId], references: [id])
  brandId     Int
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  product     Product[]
  quantity    Quantity[]
}

model Product {
  id              Int           @id @default(autoincrement())
  masterProduct   MasterProduct @relation(fields: [masterProductId], references: [id])
  masterProductId Int
  quantity        Quantity      @relation(fields: [quantityId], references: [id])
  quantityId      Int
  cart            Cart          @relation(fields: [cartId], references: [id])
  cartId          Int
  order           Order[]
}

model Quantity {
  id              Int           @id @default(autoincrement())
  masterProduct   MasterProduct @relation(fields: [masterProductId], references: [id])
  masterProductId Int
  product         Product[]
  quantity        Int
}

model Order {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  address   Address    @relation(fields: [addressId], references: [id])
  addressId Int
  product   Product[]
  total     Float
  status    String
  delivery  Delivery[]
}

model Delivery {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  status    String
  delivered Boolean
}

model Category {
  id            Int             @id @default(autoincrement())
  name          String
  masterProduct MasterProduct[]
}

enum userRole {
  admin
  user
  delivery
}

enum userStatus {
  unauthorized
  active
  inactive
}
